{"version":3,"file":"static/js/264.84fbd9ff.chunk.js","mappings":"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","sources":["pages/CourseCurriculum.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport '../styles/CourseCurriculum.css';\r\n\r\nconst CourseCurriculum = () => {\r\n  const [completedLectures, setCompletedLectures] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  // Load from localStorage on component mount\r\n  useEffect(() => {\r\n    const loadProgress = () => {\r\n      try {\r\n        const savedProgress = localStorage.getItem('completedLectures');\r\n        if (savedProgress) {\r\n          const parsed = JSON.parse(savedProgress);\r\n          if (Array.isArray(parsed)) {\r\n            setCompletedLectures(parsed);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading progress:', error);\r\n      } finally {\r\n        setIsLoaded(true);\r\n      }\r\n    };\r\n\r\n    loadProgress();\r\n    \r\n    // Add event listener for storage changes\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === 'completedLectures') {\r\n        loadProgress();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  // Save to localStorage when completedLectures changes\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      localStorage.setItem('completedLectures', JSON.stringify(completedLectures));\r\n    }\r\n  }, [completedLectures, isLoaded]);\r\n\r\n  const toggleLectureCompletion = useCallback((lectureId) => {\r\n    setCompletedLectures(prev => {\r\n      const newState = prev.includes(lectureId)\r\n        ? prev.filter(id => id !== lectureId)\r\n        : [...prev, lectureId];\r\n      return newState;\r\n    });\r\n  }, []);\r\n\r\n  const curriculumSections = [\r\n    {\r\n      title: \"Introduction & Big Data Basics\",\r\n      lectures: [\r\n        { id: 'lec1', title: \"Lecture 1: Intro to Software & Big Data\" },\r\n        { id: 'lec2', title: \"Lecture 2: NoSQL Types - MongoDB with Python\" }\r\n      ]\r\n    },\r\n    {\r\n      title: \"Software Engineering & Architecture\",\r\n      lectures: [\r\n        { id: 'lec3', title: \"Lecture 3: Clean Code + SOLID Principles\" },\r\n        { id: 'lec4', title: \"Lecture 4: Microservices Fundamentals\" },\r\n        { id: 'lec5', title: \"Lecture 5: Microservices Design Patterns\" },\r\n        { id: 'lec6', title: \"Lecture 6: Microservices Design Patterns - Part 2\" }\r\n      ]\r\n    },\r\n    {\r\n      title: \"Modeling & OOP Concepts\",\r\n      lectures: [\r\n        { id: 'lec7', title: \"Lecture 7: OCL + UML Modeling\" },\r\n        { id: 'lec8', title: \"Lecture 8: AOP + OOP Principles\" }\r\n      ]\r\n    },\r\n    {\r\n      title: \"Testing & Frontend Development\",\r\n      lectures: [\r\n        { id: 'lec9', title: \"Lecture 9: Software Testing (Manual Testing)\" },\r\n        { id: 'lec10', title: \"Lecture 10: React.js - Next.js & API Integration\" }\r\n      ]\r\n    },\r\n    {\r\n      title: \"Advanced Topics\",\r\n      lectures: [\r\n        { id: 'lec11', title: \"Lecture 11: Classification & Regression\" }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  if (!isLoaded) {\r\n    return (\r\n      <div className=\"curriculum-container\">\r\n        <div className=\"loading-spinner\">Loading...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const totalLectures = 11;\r\n  const completedCount = completedLectures.length;\r\n  const completionPercentage = Math.round((completedCount / totalLectures) * 100);\r\n\r\n  return (\r\n    <div className=\"curriculum-container\">\r\n      <h1 className=\"course-title\">Software Engineering Master Course</h1>\r\n      <p className=\"course-description\">Complete curriculum with progress tracking</p>\r\n      \r\n      <div className=\"progress-container\">\r\n        <div className=\"progress-bar\">\r\n          <div \r\n            className=\"progress-fill\"\r\n            style={{\r\n              width: `${completionPercentage}%`,\r\n              transition: 'width 0.4s ease'\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"progress-info\">\r\n          <span className=\"progress-percentage\">{completionPercentage}%</span>\r\n          <span className=\"progress-count\">\r\n            ({completedCount} of {totalLectures} completed)\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sections-container\">\r\n        {curriculumSections.map((section, sectionIndex) => (\r\n          <div key={`section-${sectionIndex}`} className=\"curriculum-section\">\r\n            <h2 className=\"section-title\">{section.title}</h2>\r\n            <div className=\"lectures-list\">\r\n              {section.lectures.map((lecture) => (\r\n                <div \r\n                  key={lecture.id}\r\n                  className={`lecture-item ${completedLectures.includes(lecture.id) ? 'completed' : ''}`}\r\n                  onClick={() => toggleLectureCompletion(lecture.id)}\r\n                >\r\n                  <div className=\"lecture-checkbox\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={completedLectures.includes(lecture.id)}\r\n                      readOnly\r\n                    />\r\n                    <span className=\"custom-checkbox\"></span>\r\n                  </div>\r\n                  <div className=\"lecture-details\">\r\n                    <span className=\"lecture-title\">{lecture.title}</span>\r\n                    <span className=\"lecture-status\">\r\n                      {completedLectures.includes(lecture.id) ? '✓ Completed' : '○ Pending'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseCurriculum;"],"names":["CourseCurriculum","completedLectures","setCompletedLectures","useState","isLoaded","setIsLoaded","useEffect","loadProgress","savedProgress","localStorage","getItem","parsed","JSON","parse","Array","isArray","error","console","handleStorageChange","e","key","window","addEventListener","removeEventListener","setItem","stringify","toggleLectureCompletion","useCallback","lectureId","prev","includes","filter","id","_jsx","className","children","completedCount","length","completionPercentage","Math","round","_jsxs","style","width","transition","title","lectures","map","section","sectionIndex","lecture","onClick","type","checked","readOnly"],"sourceRoot":""}