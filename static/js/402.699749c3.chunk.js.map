{"version":3,"file":"static/js/402.699749c3.chunk.js","mappings":"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","sources":["pages/Assignments.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Assignments.css'; \r\n\r\nconst Assignments = () => {\r\n  const [activeTest, setActiveTest] = useState(null);\r\n  const [attempts, setAttempts] = useState({});\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n\r\n  const assignments = [\r\n  ];\r\n\r\n  const startTest = (testId) => {\r\n    setActiveTest(testId);\r\n    setCurrentQuestion(0);\r\n    setSelectedOption(null);\r\n    setShowResult(false);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setAttempts(prev => ({\r\n      ...prev,\r\n      [testId]: (prev[testId] || 0) + 1\r\n    }));\r\n  };\r\n\r\n  const closeTest = () => {\r\n    setActiveTest(null);\r\n  };\r\n\r\n  const handleOptionSelect = (optionIndex) => {\r\n    setSelectedOption(optionIndex);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    const currentTest = assignments.find(a => a.id === activeTest);\r\n    const isCorrect = selectedOption === currentTest.questions[currentQuestion].correctAnswer;\r\n    \r\n    setUserAnswers([...userAnswers, { \r\n      questionIndex: currentQuestion, \r\n      selectedOption, \r\n      isCorrect \r\n    }]);\r\n    \r\n    if (isCorrect) {\r\n      setScore(score + 1);\r\n    }\r\n    \r\n    if (currentQuestion < currentTest.questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n      setSelectedOption(null);\r\n    } else {\r\n      setShowResult(true);\r\n    }\r\n  };\r\n\r\n  const prevQuestion = () => {\r\n    if (currentQuestion > 0) {\r\n      setCurrentQuestion(currentQuestion - 1);\r\n      const prevAnswer = userAnswers.find(a => a.questionIndex === currentQuestion - 1);\r\n      setSelectedOption(prevAnswer ? prevAnswer.selectedOption : null);\r\n    }\r\n  };\r\n\r\n  const restartTest = () => {\r\n    startTest(activeTest);\r\n  };\r\n\r\n  const getCurrentTest = () => {\r\n    return assignments.find(a => a.id === activeTest);\r\n  };\r\n\r\n  const renderQuestionWithAnswers = (questionIndex) => {\r\n    const currentTest = getCurrentTest();\r\n    const question = currentTest.questions[questionIndex];\r\n    const userAnswer = userAnswers.find(a => a.questionIndex === questionIndex);\r\n    \r\n    return (\r\n      <div className=\"assignment-question\">\r\n        <h3>{question.question}</h3>\r\n        <div className=\"assignment-options\">\r\n          {question.options.map((option, index) => {\r\n            let optionClass = \"assignment-option\";\r\n            \r\n            if (userAnswer) {\r\n              if (index === question.correctAnswer) {\r\n                optionClass += \" assignment-correct\";\r\n              } else if (index === userAnswer.selectedOption && !userAnswer.isCorrect) {\r\n                optionClass += \" assignment-incorrect\";\r\n              }\r\n            }\r\n            \r\n            return (\r\n              <div\r\n                key={index}\r\n                className={optionClass}\r\n              >\r\n                {option}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"assignments-app\">\r\n      <h1>School Assignments</h1>\r\n      \r\n      {assignments.length > 0 ? (\r\n        <div className=\"assignments-cards-container\">\r\n          {assignments.map(assignment => (\r\n            <div key={assignment.id} className=\"assignment-card\">\r\n              <h2>{assignment.title}</h2>\r\n              <p>{assignment.description}</p>\r\n              <button \r\n                className=\"assignment-test-btn\" \r\n                onClick={() => startTest(assignment.id)}\r\n              >\r\n                Take Test\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"assignment-no-assignments\">\r\n          <p>No assignments available</p>\r\n        </div>\r\n      )}\r\n\r\n      {activeTest && (\r\n        <div className=\"assignment-test-modal\">\r\n          <div className=\"assignment-test-content\">\r\n            <span className=\"assignment-close-btn\" onClick={closeTest}>&times;</span>\r\n            \r\n            {!showResult ? (\r\n              <>\r\n                <div className=\"assignment-progress\">\r\n                  Question {currentQuestion + 1} of {getCurrentTest().questions.length}\r\n                </div>\r\n                \r\n                <div className=\"assignment-question active\">\r\n                  <h3>{getCurrentTest().questions[currentQuestion].question}</h3>\r\n                  <div className=\"assignment-options\">\r\n                    {getCurrentTest().questions[currentQuestion].options.map((option, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className={`assignment-option ${selectedOption === index ? 'assignment-selected' : ''}`}\r\n                        onClick={() => handleOptionSelect(index)}\r\n                      >\r\n                        {option}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"assignment-navigation\">\r\n                  <button \r\n                    className=\"assignment-nav-btn\" \r\n                    onClick={prevQuestion}\r\n                    disabled={currentQuestion === 0}\r\n                  >\r\n                    Previous\r\n                  </button>\r\n                  \r\n                  <button\r\n                    className={`assignment-nav-btn ${currentQuestion === getCurrentTest().questions.length - 1 ? 'assignment-submit-btn' : ''}`}\r\n                    onClick={nextQuestion}\r\n                    disabled={selectedOption === null}\r\n                  >\r\n                    {currentQuestion === getCurrentTest().questions.length - 1 ? 'Submit' : 'Next'}\r\n                  </button>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <div className=\"assignment-result\">\r\n                <h2>Test Results</h2>\r\n                <div className=\"assignment-score\">\r\n                  You scored {score} out of {getCurrentTest().questions.length}\r\n                </div>\r\n                <div className=\"assignment-attempts\">\r\n                  Number of attempts: {attempts[activeTest] || 1}\r\n                </div>\r\n                \r\n                <div className=\"assignment-questions-review\">\r\n                  <h3>Review your answers:</h3>\r\n                  {getCurrentTest().questions.map((_, index) => (\r\n                    <div key={index}>\r\n                      {renderQuestionWithAnswers(index)}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                \r\n                <button className=\"assignment-restart-btn\" onClick={restartTest}>\r\n                  Retake Test\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Assignments;"],"names":["Assignments","activeTest","setActiveTest","useState","attempts","setAttempts","currentQuestion","setCurrentQuestion","selectedOption","setSelectedOption","showResult","setShowResult","score","setScore","userAnswers","setUserAnswers","assignments","startTest","testId","prev","getCurrentTest","find","a","id","renderQuestionWithAnswers","questionIndex","question","questions","userAnswer","_jsxs","className","children","_jsx","options","map","option","index","optionClass","correctAnswer","isCorrect","length","assignment","title","description","onClick","closeTest","_","restartTest","_Fragment","prevQuestion","prevAnswer","disabled","nextQuestion","currentTest"],"sourceRoot":""}